#################################################################################################################################
#
# Workflow Description:
#     Use UV to run testing by specific type with all test items via PyTest and generate its testing
#     coverage report (it would save reports by 'actions/upload-artifact').
#
# Workflow input parameters:
#     * test_type: The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'.
#     * all_test_items_paths: The target paths of test items under test.
#     * install_dependency_with_group: Install the dependency by UV configuration with dependency group setting. This parameter receive the dependency group naming.
#     * python-versions: JSON array of Python versions to test against. Default: '["3.13"]'
#     * operating-systems: JSON array of operating systems to test on. Default: '["ubuntu-latest", "ubuntu-22.04", "macos-latest", "macos-14"]'
#
# Workflow running output:
#     No, but it would save the testing coverage reports to provide after-process to organize and record.
#
#     * Upload-Artifact:
#         * coverage: The test coverage report which be generated by PyTest, and it's recorded after run test done.
#                           The file name format would be .coverage.<test type>.<runtime os>-<python-version>
#
#################################################################################################################################

name: Run test items via PyTest

on:
  workflow_call:
    inputs:
      test_type:
        description: "The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'."
        required: true
        type: string
      test_working_directory:
        description: "The working directory for test running."
        required: false
        type: string
        default: './'
      test_folder:
        description: "The folder path for test code."
        required: false
        type: string
        default: './test'
      all_test_items_paths:
        description: "The target paths of test items under test."
        required: false
        type: string
        default: '["./test"]'
      install_dependency_with_group:
        description: "Install the dependency by UV configuration with dependency group setting. This parameter receive the dependency group naming. (multiple values allowed)"
        type: string
        required: false
        default: ''
      with-environment-variables:
        description: "Set the specific environment for the environment variables."
        type: string
        required: false
        default: ''
      max-parallel:
        description: "Set the max-parallel jobs."
        type: number
        required: false
        default: 0
      python-versions:
        description: "JSON array of Python versions to test against."
        type: string
        required: false
        default: '["3.13"]'
      operating-systems:
        description: "JSON array of operating systems to test on."
        type: string
        required: false
        default: '["ubuntu-latest", "ubuntu-22.04", "macos-latest", "macos-14"]'
    secrets:
      e2e_test_api_token:
        description: "Set the API token for end-to-end test if it needs."
        required: false

jobs:
  run_test_items:
    strategy:
      max-parallel: ${{ inputs.max-parallel }}
      matrix:
        python-version: ${{fromJson(inputs.python-versions)}}
        os: ${{fromJson(inputs.operating-systems)}}
        test-path: ${{fromJson(inputs.all_test_items_paths)}}
      fail-fast: false    # Fix issue in GitHub Action: FailFast: cancelling since parallel instance has failed

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Activate the uv virtual environment
        run: |
          uv venv
          . .venv/bin/activate

      - name: Install all the project dependencies
        if: ${{ inputs.install_dependency_with_group == '' }}
        run: uv sync --locked --all-extras --dev

      - name: Build Python runtime environment by UV with dependency group *${{ inputs.install_dependency_with_group }}*
        if: ${{ inputs.install_dependency_with_group != '' }}
        working-directory: ${{ inputs.test_working_directory }}
        run: |
          uv pip install --group=${{ inputs.install_dependency_with_group }}

      - name: Verify the Slack bot token
        run: |
          curl -s https://slack.com/api/auth.test -H "Authorization: Bearer $SLACK_BOT_TOKEN"

      - name: Run the specific tests with pytest
        if: ${{ inputs.test_type == '' }}
        working-directory: ${{ inputs.test_working_directory }}
        run: uv run pytest ${{ matrix.test-path }}
        continue-on-error: ${{ inputs.keep_run_if_test_fail }}
        env:
          E2E_TEST_API_TOKEN: ${{ secrets.e2e_test_api_token }}

      - name: Run ${{ inputs.test_type }} tests with pytest
        if: ${{ inputs.test_type != '' }}
        working-directory: ${{ inputs.test_working_directory }}
        run: uv run pytest ${{ inputs.test_folder }}
        continue-on-error: ${{ inputs.keep_run_if_test_fail }}
        env:
          E2E_TEST_API_TOKEN: ${{ secrets.e2e_test_api_token }}

      - name: Rename the code coverage result file
        working-directory: ${{ inputs.test_working_directory }}
        run: |
          mv ./.coverage ./.coverage.${{ inputs.test_type }}.${{ matrix.os }}-${{ matrix.python-version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v4
        with:
          name: coverage_${{ inputs.test_type }}_${{ matrix.os }}_${{ matrix.python-version }}
          path: ${{ inputs.test_working_directory }}.coverage.${{ inputs.test_type }}.${{ matrix.os }}-${{ matrix.python-version }}
          if-no-files-found: error
          include-hidden-files: true
