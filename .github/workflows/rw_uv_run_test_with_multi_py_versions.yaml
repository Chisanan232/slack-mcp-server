#################################################################################################################################
#
# Workflow Description:
#     Use UV to run testing by specific type with all test items via PyTest and generate its testing
#     coverage report (it would save reports by 'actions/upload-artifact').
#
# Workflow input parameters:
#     * test_type: The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'.
#     * all_test_items_paths: The target paths of test items under test.
#     * install_dependency_with_group: Install the dependency by UV configuration with dependency group setting. This parameter receive the dependency group naming.
#
# Workflow running output:
#     No, but it would save the testing coverage reports to provide after-process to organize and record.
#
#     * Upload-Artifact:
#         * coverage: The test coverage report which be generated by PyTest, and it's recorded after run test done.
#                           The file name format would be .coverage.<test type>.<runtime os>-<python-version>
#
#################################################################################################################################

name: Run test items via PyTest

on:
  workflow_call:
    inputs:
      test_type:
        description: "The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'."
        required: true
        type: string
      all_test_items_paths:
        description: "The target paths of test items under test."
        required: true
        type: string
      install_dependency_with_group:
        description: "Install the dependency by UV configuration with dependency group setting. This parameter receive the dependency group naming. (multiple values allowed)"
        type: string
        required: false
        default: ''

jobs:
  run_test_items:
    strategy:
      matrix:
        python-version: ['3.12','3.13']
        os: [ubuntu-latest,ubuntu-22.04,macos-latest,macos-14]
        test-path: ${{fromJson(inputs.all_test_items_paths)}}
      fail-fast: false    # Fix issue in GitHub Action: FailFast: cancelling since parallel instance has failed

    uses: ./.github/workflows/rw_uv_run_test.yaml
    with:
      runtime_os: ${{ matrix.os }}
      python_version: ${{ matrix.python-version }}
      test_type: ${{ inputs.test_type }}
      all_test_items_paths: ${{ inputs.all_test_items_paths }}
      install_dependency_with_group: ${{ inputs.install_dependency_with_group }}
