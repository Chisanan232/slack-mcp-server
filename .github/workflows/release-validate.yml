name: Release Validation (Dry Run)
# This workflow calls the centralized validation process from the template project

on:
  pull_request:
    branches:
      - master
    paths:
      - .github/tag_and_release/**
      - pyproject.toml
      - .github/workflows/release.yml
      - .github/workflows/release**.yml
      - .github/workflows/rw**.yaml
      - "!.github/workflows/rw_build_and_test.yaml"
      - "!.github/workflows/rw_run_all_test_and_record.yaml"
      - "!.github/workflows/rw_uv_run_test_with_multi_py_versions.yaml"
  workflow_dispatch:
    inputs:
      level:
        description: 'Release level to test'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      python:
        description: 'Python package validation'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - force
          - skip
      docker:
        description: 'Docker image validation'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - force
          - skip
      docs:
        description: 'Documentation validation'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - force
          - skip

permissions:
  contents: read
  packages: read
  id-token: write  # For cosign keyless signing

concurrency:
  group: release-validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Call the centralized complete validation workflow
  validation:
    name: Complete Release Validation Process
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_release_validation_complete.yaml@master
    with:
      level: ${{ inputs.level }}
      python: ${{ inputs.python }}
      docker: ${{ inputs.docker }}
      docs: ${{ inputs.docs }}

  # Summary job to report results
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: validation
    if: always()
    steps:
      - name: Report validation results
        run: |
          echo "=== Release Validation Summary ==="
          echo ""
          echo "Validation Status: ${{ needs.validation.result }}"
          echo "Python Build: ${{ needs.validation.outputs.python_validated }}"
          echo "Docker Build: ${{ needs.validation.outputs.docker_validated }}"
          echo "Docs Build: ${{ needs.validation.outputs.docs_validated }}"
          echo "Security Scan: ${{ needs.validation.outputs.security_validated }}"
          echo "Test Version: ${{ needs.validation.outputs.test_version }}"
          echo ""
          
          if [[ "${{ needs.validation.result }}" == "success" && "${{ needs.validation.outputs.validation_passed }}" == "true" ]]; then
            echo "‚úÖ All validation checks passed! Release process is ready."
            echo ""
            echo "Validation Configuration:"
            echo "- Release Intent: ${{ needs.validation.outputs.do_release }}"
            echo "- Level: ${{ needs.validation.outputs.level }}"
            echo "- Python: ${{ needs.validation.outputs.python }}"
            echo "- Docker: ${{ needs.validation.outputs.docker }}"
            echo "- Docs: ${{ needs.validation.outputs.docs }}"
            echo "- Test Version: ${{ needs.validation.outputs.test_version }}"
            echo ""
            echo "üöÄ The release workflows are ready to deploy!"
          else
            echo "‚ùå Some validation checks failed. Please review the logs above."
            echo ""
            echo "Failed validations need to be addressed before release:"
            if [[ "${{ needs.validation.outputs.python_validated }}" != "true" ]]; then
              echo "- Python package build/test failed"
            fi
            if [[ "${{ needs.validation.outputs.docker_validated }}" != "true" ]]; then
              echo "- Docker image build/test failed"
            fi
            if [[ "${{ needs.validation.outputs.docs_validated }}" != "true" ]]; then
              echo "- Documentation build/test failed"
            fi
            if [[ "${{ needs.validation.outputs.security_validated }}" != "true" ]]; then
              echo "- Security scan failed"
            fi
            exit 1
          fi
