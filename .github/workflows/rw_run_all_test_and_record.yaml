name: CI

on:
  workflow_call:
    secrets:
      e2e_test_slack_bot_token:
        description: "Set the Slack bot token for end-to-end test."
        required: false

jobs:
  build-and-test:
#    name: Run all tests and organize all test reports
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'dependencies') }}
    uses: ./.github/workflows/rw_build_and_test.yaml
    secrets:
      e2e_test_slack_bot_token: ${{ inputs.e2e_test_slack_bot_token }}

  unit-test_codecov_finish:
#    name: Organize and generate the testing report and upload it to Codecov
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == 'master') }}
    needs: build-and-test
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_upload_test_cov_report.yaml@v7.3
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      test_type: unit-test
      upload-to-codecov: true
      codecov_flags: unit-test  # Required if 'upload-to-codecov' is true
      codecov_name: slack-mcp  # Required if 'upload-to-codecov' is true

  integration-test_codecov_finish:
#    name: Organize and generate the testing report and upload it to Codecov
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == 'master') }}
    needs: build-and-test
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_upload_test_cov_report.yaml@v7.3
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      test_type: integration-test
      upload-to-codecov: true
      codecov_flags: integration-test  # Required if 'upload-to-codecov' is true
      codecov_name: slack-mcp  # Required if 'upload-to-codecov' is true

  e2e-test_codecov_finish:
#    name: Organize and generate the testing report and upload it to Codecov
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == 'master') || inputs.e2e_test_slack_bot_token != '' }}
    needs: build-and-test
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_upload_test_cov_report.yaml@v7.3
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      test_type: e2e-test
      upload-to-codecov: true
      codecov_flags: e2e-test  # Required if 'upload-to-codecov' is true
      codecov_name: slack-mcp  # Required if 'upload-to-codecov' is true

  contract-test_codecov_finish:
#    name: Organize and generate the testing report and upload it to Codecov
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == 'master') }}
    needs: build-and-test
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_upload_test_cov_report.yaml@v7.3
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      test_type: contract-test
      upload-to-codecov: true
      codecov_flags: contract-test  # Required if 'upload-to-codecov' is true
      codecov_name: slack-mcp  # Required if 'upload-to-codecov' is true

  all-test_codecov_finish:
#    name: Organize and generate the testing report and upload it to Codecov
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == 'master') }}
    needs: build-and-test
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_upload_test_cov_report.yaml@v7.3
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      test_type: all-test
      upload-to-codecov: true
      codecov_flags: all-test  # Required if 'upload-to-codecov' is true
      codecov_name: slack-mcp  # Required if 'upload-to-codecov' is true

  sonarcloud_finish:
#    name: SonarCloud Scan
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == 'master') }}
    needs: build-and-test
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_sonarqube_scan.yaml@v7.3
    secrets:
      sonar_token: ${{ secrets.SONAR_TOKEN }}
    with:
      download_path: ${{ inputs.download_path }}
