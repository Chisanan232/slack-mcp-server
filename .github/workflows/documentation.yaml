name: documentation

on:
  push:
    branches:
#      - "develop/**"    # For development and testing
      - "master"
    paths:
#     Documentation
#     Doc - CI workflow
      - ".github/workflows/documentation.yaml"
      - "scripts/ci/**documentation**.sh"
#     Doc - Font-End config
      - "docs/package.json"
      - "docs/pnpm-lock.yaml"
#     Doc - Docusaurus config
      - "docs/docusaurus.config.ts"
#     Doc - Content
      - "docs/**/*.md"
      - "docs/**/*.mdx"
      - "docs/**/*.ts"
      - "docs/**/*.tsx"
      - "docs/**/*.js"
      - "docs/**/*.jsx"
      - "docs/**/*.css"
#     Doc - versioning (Docusaurus versioned content)
      - "docs/*_versions.json"
      - "docs/*_versioned_docs/**"
      - "docs/*_versioned_sidebars/**"
  workflow_run:
    workflows: ["release"]
    types: [completed]
    branches: ["master"]

permissions:
  contents: write
  id-token: write
  pages: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Guard job: Check if documentation files changed and if release workflow succeeded
  check_docs_changes:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check_changes.outputs.should_deploy || steps.set_push_deploy.outputs.should_deploy }}
    steps:
      - name: Set deployment flag for push events
        id: set_push_deploy
        if: github.event_name == 'push'
        run: |
          echo "Direct push event detected, proceeding with deployment"
          echo "should_deploy=true" >> $GITHUB_OUTPUT

      - name: Download docs update flag from release workflow
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v5
        with:
          name: release-docs-flag
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Check release workflow success and docs update flag
        id: check_changes
        if: github.event_name == 'workflow_run'
        run: |
          set -euo pipefail
          
          # Verify release workflow succeeded
          if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
            echo "Release workflow failed, skipping documentation deployment"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Read docs update flag from artifact
          DOCS_UPDATED=$(cat docs_updated.txt)
          
          echo "Documentation updated flag: $DOCS_UPDATED"
          
          if [[ "$DOCS_UPDATED" == "true" ]]; then
            echo "Documentation was updated during release, proceeding with deployment"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "No documentation files were updated, skipping deployment"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy_documentation:
    runs-on: ubuntu-latest
    # Run based on the check_docs_changes job output (which handles both push and workflow_run events)
    if: needs.check_docs_changes.outputs.should_deploy == 'true'
    needs: [check_docs_changes]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Setup pnpm first
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      # Then setup Node.js with pnpm cache
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: docs/pnpm-lock.yaml

      - name: Cache Docusaurus build
        uses: actions/cache@v4
        with:
          path: |
            docs/.docusaurus
            docs/node_modules/.cache
          key: ${{ runner.os }}-docusaurus-${{ hashFiles('docs/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-docusaurus-

      - name: Install dependencies
        working-directory: docs
        run: pnpm install --no-frozen-lockfile

      - name: Build website
        working-directory: docs
        run: pnpm build

      # Setup Pages
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./docs/build

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
