#################################################################################################################################
#
# Workflow Description:
#     Use UV to run testing by specific type with all test items via PyTest and generate its testing
#     coverage report (it would save reports by 'actions/upload-artifact').
#
# Workflow input parameters:
#     * runtime_os: The OS to use for runtime environment. In default, it's 'ubuntu-latest'.
#     * python_version: The Python version to run the workflow. In default, it's Python version '3.11'.
#     * test_type: The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'.
#     * test_working_directory: The working directory for test running.
#     * install_dependency_with_group: Install the dependency by UV configuration with dependency group setting. This parameter receive the dependency group naming.
#     * all_test_items_paths: The target paths of test items under test.
#     * keep_run_if_test_fail: Keep running CI process if it gets failure at running runs.
#
# Workflow running output:
#     No, but it would save the testing coverage reports to provide after-process to organize and record.
#
#     * Upload-Artifact:
#         * coverage: The test coverage report which be generated by PyTest, and it's recorded after run test done.
#                           The file name format would be .coverage.<test type>.<runtime os>-<python-version>
#
#################################################################################################################################

name: Run test items via PyTest

on:
  workflow_call:
    inputs:
      runtime_os:
        description: "The OS to use for runtime environment. In default, it's 'ubuntu-latest'."
        required: false
        type: string
        default: ubuntu-latest
      python_version:
        description: "The Python version to run the workflow. In default, it's Python version '3.11'."
        required: false
        type: string
        default: 3.11
      test_type:
        description: "The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'."
        required: true
        type: string
      test_working_directory:
        description: "The working directory for test running."
        required: false
        type: string
        default: './'
      install_dependency_with_group:
        description: "Install the dependency by UV configuration with dependency group setting. This parameter receive the dependency group naming. (multiple values allowed)"
        type: string
        required: false
        default: ''
      all_test_items_paths:
        description: "The target paths of test items under test."
        required: true
        type: string
      keep_run_if_test_fail:
        description: "Keep running CI process if it gets failure at running runs."
        type: boolean
        required: false
        default: false

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  run_test_items:
    runs-on: ${{ inputs.runtime_os }}

    strategy:
      matrix:
        test-path: ${{fromJson(inputs.all_test_items_paths)}}

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ inputs.python_version }}

      - name: Activate the uv virtual environment
        run: |
          uv venv
          . .venv/bin/activate

      - name: Install all the project dependencies
        if: ${{ inputs.install_dependency_with_group == '' }}
        run: uv sync --locked --all-extras --dev

      - name: Build Python runtime environment by UV with dependency group *${{ inputs.install_dependency_with_group }}*
        if: ${{ inputs.install_dependency_with_group != '' }}
        working-directory: ${{ inputs.test_working_directory }}
        run: |
          uv pip install --group=${{ inputs.install_dependency_with_group }}

      - name: Run tests with pytest
        working-directory: ${{ inputs.test_working_directory }}
        run: uv run pytest ${{ matrix.test-path }}
        continue-on-error: ${{ inputs.keep_run_if_test_fail }}

      - name: Rename the code coverage result file
        working-directory: ${{ inputs.test_working_directory }}
        run: |
          mv ./.coverage ./.coverage.${{ inputs.test_type }}.${{ inputs.runtime_os }}-${{ inputs.python_version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v4
        with:
          name: coverage_${{ inputs.test_type }}_${{ inputs.runtime_os }}_${{ inputs.python_version }}
          path: ${{ inputs.test_working_directory }}.coverage.${{ inputs.test_type }}.${{ inputs.runtime_os }}-${{ inputs.python_version }}
          if-no-files-found: error
          include-hidden-files: true
